
import xmlrpc.client

# --- Fill these in with your Odoo details ---
url = "https://euromenager.odoo.com" # Your Odoo URL
db = "euromenager"
username = "herve@euromenager.be"
password = "b9b87850fd4826c79d6945a7665a8e5b523e8dea"

# ---------------------------------------------

print("Attempting to connect to Odoo...")

# Initialize models variable
models = None

try:
    # This creates a client that can talk to the "common" endpoint for authentication
    common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
    
    # Let's see what version of Odoo we are connecting to
    version_info = common.version()
    print("Successfully connected!")
    print(f"Odoo Server Version: {version_info}")

    # --- The most important step: Authentication ---
    # This gets your user ID number from the server, which you need for all future calls
    uid = common.authenticate(db, username, password, {})
    
    if uid:
        print(f"Authentication successful! Your User ID is: {uid}")
        print("\nYou are ready to start building your Odoo agent!")
        
        # Create the models object for interacting with Odoo data
        models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
    else:
        print("Authentication failed. Please check your URL, DB, username, and password/API key.")
        models = None

except Exception as e:
    print(f"An error occurred: {e}")
    print("Please check your Odoo URL and network connection.")
    models = None
    
# --- 2. The Tool Function ---
def find_customer_email(models, customer_name: str) -> str:
    """
    Finds the email address for a given customer name in Odoo.
    """
    print(f"\n--- Searching for customer: '{customer_name}' ---")
    try:
        # This is the search_read command.
        # It searches the 'res.partner' model (Odoo's model for contacts).
        #
        # 'domain': This is the filter. We are looking for a record where the 'name' field
        #           case-insensitively matches the customer_name we provide.
        # 'fields': This is the list of data fields we want Odoo to return.
        # 'limit': We only need the first match we find.
        search_domain = [('name', '=ilike', customer_name)]
        fields_to_read = ['name', 'email']
        
        partner_data = models.execute_kw(db, uid, password,
            'res.partner', 'search_read',
            [search_domain],
            {'fields': fields_to_read, 'limit': 1})

        if partner_data:
            # The result is a list of dictionaries. We take the first one.
            found_partner = partner_data[0]
            print(f"Found Partner: {found_partner}")
            return f"The email for {found_partner['name']} is {found_partner['email']}."
        else:
            print("No partner found with that name.")
            return f"Sorry, I could not find a customer named '{customer_name}'."

    except Exception as e:
        print(f"An error occurred while searching Odoo: {e}")
        return "Sorry, there was an error connecting to the Odoo database."

# --- 3. Test the function ---
if __name__ == "__main__":
    if models is not None:
        # IMPORTANT: Change this to a real customer name that exists in your Odoo database!
        test_customer_name = "A. Bendada" 
        
        result = find_customer_email(models, test_customer_name)
        print("\n--- Function Result ---")
        print(result)
    else:
        print("Cannot test function: Odoo connection failed.")
